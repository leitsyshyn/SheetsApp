//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Sheets.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class SheetsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, DIGIT=12, LETTER=13, WS=14;
	public const int
		RULE_expression = 0, RULE_number = 1, RULE_cell = 2;
	public static readonly string[] ruleNames = {
		"expression", "number", "cell"
	};

	private static readonly string[] _LiteralNames = {
		null, "'^'", "'*'", "'/'", "'+'", "'-'", "'dec('", "')'", "'inc('", "'('", 
		"'.'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"DIGIT", "LETTER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sheets.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SheetsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SheetsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SheetsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IncrementExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IncrementExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitIncrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AffirmExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AffirmExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterAffirmExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitAffirmExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAffirmExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowerExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowerExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitPowerExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowerExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplyExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplyExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitMultiplyExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CellExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public CellContext cell() {
			return GetRuleContext<CellContext>(0);
		}
		public CellExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterCellExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitCellExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCellExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumberExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitNumberExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitAddExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitSubtractExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtractExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitParenExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DecrementExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitDecrementExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrementExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitNegateExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivideExprContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivideExprContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterDivideExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitDivideExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivideExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__5:
				{
				_localctx = new DecrementExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 7;
				Match(T__5);
				State = 8;
				expression(0);
				State = 9;
				Match(T__6);
				}
				break;
			case T__7:
				{
				_localctx = new IncrementExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 11;
				Match(T__7);
				State = 12;
				expression(0);
				State = 13;
				Match(T__6);
				}
				break;
			case T__4:
				{
				_localctx = new NegateExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15;
				Match(T__4);
				State = 16;
				expression(5);
				}
				break;
			case T__3:
				{
				_localctx = new AffirmExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17;
				Match(T__3);
				State = 18;
				expression(4);
				}
				break;
			case T__8:
				{
				_localctx = new ParenExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19;
				Match(T__8);
				State = 20;
				expression(0);
				State = 21;
				Match(T__6);
				}
				break;
			case LETTER:
				{
				_localctx = new CellExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23;
				cell();
				}
				break;
			case DIGIT:
				{
				_localctx = new NumberExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24;
				number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 44;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 42;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new PowerExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 27;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 28;
						Match(T__0);
						State = 29;
						expression(13);
						}
						break;
					case 2:
						{
						_localctx = new MultiplyExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 30;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 31;
						Match(T__1);
						State = 32;
						expression(12);
						}
						break;
					case 3:
						{
						_localctx = new DivideExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 33;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 34;
						Match(T__2);
						State = 35;
						expression(11);
						}
						break;
					case 4:
						{
						_localctx = new AddExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 36;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 37;
						Match(T__3);
						State = 38;
						expression(10);
						}
						break;
					case 5:
						{
						_localctx = new SubtractExprContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 39;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 40;
						Match(T__4);
						State = 41;
						expression(9);
						}
						break;
					}
					} 
				}
				State = 46;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SheetsParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SheetsParser.DIGIT, i);
		}
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 2, RULE_number);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 47;
					Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 50;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 58;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 52;
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 54;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 53;
						Match(DIGIT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 56;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CellContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(SheetsParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(SheetsParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(SheetsParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(SheetsParser.DIGIT, i);
		}
		public CellContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cell; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.EnterCell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISheetsListener typedListener = listener as ISheetsListener;
			if (typedListener != null) typedListener.ExitCell(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISheetsVisitor<TResult> typedVisitor = visitor as ISheetsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCell(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CellContext cell() {
		CellContext _localctx = new CellContext(Context, State);
		EnterRule(_localctx, 4, RULE_cell);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 60;
				Match(LETTER);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==LETTER );
			State = 66;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 65;
					Match(DIGIT);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 68;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 12);
		case 1: return Precpred(Context, 11);
		case 2: return Precpred(Context, 10);
		case 3: return Precpred(Context, 9);
		case 4: return Precpred(Context, 8);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,14,71,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,3,0,26,8,0,1,0,1,0,1,0,1,0,1,0,
		1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,43,8,0,10,0,12,0,46,9,0,1,
		1,4,1,49,8,1,11,1,12,1,50,1,1,1,1,4,1,55,8,1,11,1,12,1,56,3,1,59,8,1,1,
		2,4,2,62,8,2,11,2,12,2,63,1,2,4,2,67,8,2,11,2,12,2,68,1,2,0,1,0,3,0,2,
		4,0,1,1,0,10,11,83,0,25,1,0,0,0,2,48,1,0,0,0,4,61,1,0,0,0,6,7,6,0,-1,0,
		7,8,5,6,0,0,8,9,3,0,0,0,9,10,5,7,0,0,10,26,1,0,0,0,11,12,5,8,0,0,12,13,
		3,0,0,0,13,14,5,7,0,0,14,26,1,0,0,0,15,16,5,5,0,0,16,26,3,0,0,5,17,18,
		5,4,0,0,18,26,3,0,0,4,19,20,5,9,0,0,20,21,3,0,0,0,21,22,5,7,0,0,22,26,
		1,0,0,0,23,26,3,4,2,0,24,26,3,2,1,0,25,6,1,0,0,0,25,11,1,0,0,0,25,15,1,
		0,0,0,25,17,1,0,0,0,25,19,1,0,0,0,25,23,1,0,0,0,25,24,1,0,0,0,26,44,1,
		0,0,0,27,28,10,12,0,0,28,29,5,1,0,0,29,43,3,0,0,13,30,31,10,11,0,0,31,
		32,5,2,0,0,32,43,3,0,0,12,33,34,10,10,0,0,34,35,5,3,0,0,35,43,3,0,0,11,
		36,37,10,9,0,0,37,38,5,4,0,0,38,43,3,0,0,10,39,40,10,8,0,0,40,41,5,5,0,
		0,41,43,3,0,0,9,42,27,1,0,0,0,42,30,1,0,0,0,42,33,1,0,0,0,42,36,1,0,0,
		0,42,39,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,0,0,45,1,1,0,0,0,
		46,44,1,0,0,0,47,49,5,12,0,0,48,47,1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,
		50,51,1,0,0,0,51,58,1,0,0,0,52,54,7,0,0,0,53,55,5,12,0,0,54,53,1,0,0,0,
		55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,59,1,0,0,0,58,52,1,0,0,0,
		58,59,1,0,0,0,59,3,1,0,0,0,60,62,5,13,0,0,61,60,1,0,0,0,62,63,1,0,0,0,
		63,61,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,0,65,67,5,12,0,0,66,65,1,0,0,0,
		67,68,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,5,1,0,0,0,8,25,42,44,50,56,
		58,63,68
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
